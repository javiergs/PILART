@tool
extends Control

const MyServer = preload("res://addons/realtimecollaboration/lib/multiplayer.gd")
var peer = ENetMultiplayerPeer.new()
@export var packet_scene: PackedScene


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):	
	#Execute real time in editor
	if Engine.is_editor_hint():
		pass
		

func _on_button_test_pressed():
	print("Hola al main")
	# Uso del ejemplo
	var path1 = "res://Scenes/CarroPersona.tscn"
	var path2 = "res://Scenes/CarroPersona2.tscn"

	var result = compare_scene_files(path1, path2)

func compare_scene_files(scene_path1: String, scene_path2: String) -> int:
	var file1 = FileAccess.open(scene_path1, FileAccess.READ)
	var file2 = FileAccess.open(scene_path2, FileAccess.READ)

	# Obtiene la fecha de modificación de los archivos
	var time1 = FileAccess.get_modified_time(scene_path1)
	var time2 = FileAccess.get_modified_time(scene_path2)

   	# Obtiene el contenido de los archivos
	var content1 = file1.get_as_text()
	var content2 = file2.get_as_text()

	# Cierra los archivos después de obtener la información
	file1.close()
	file2.close()

	# Compara el contenido (usando MD5)
	var hash1 = content1.md5_text()
	var hash2 = content2.md5_text()
	
	print(hash1)
	print(hash2)

	if hash1 == hash2:
		return 0   # Ambos archivos tienen el mismo contenido
	else:
		if time1 > time2: 
			#Actualiza el viejo
			writeFile(scene_path2, content1)
			EditorInterface.reload_scene_from_path(scene_path2)
			return 1 	# El primer archivo tiene un contenido diferente y es reciente
		else:
			#Actualiza el viejo
			writeFile(scene_path1, content2)
			EditorInterface.reload_scene_from_path(scene_path1)
			return -1	# El primer archivo tiene un contenido diferente y es antiguo


func writeFile(path_file,content):
	var file = FileAccess.open(path_file, FileAccess.WRITE)
	file.store_string(content)

var player_info = {"name": "Name"}
var players = {}
var players_loaded = 0

func _on_button_host_create_pressed():
	peer.create_server(135)
	multiplayer.multiplayer_peer = peer
	players[1] = player_info
	
func _on_button_join_client_pressed():
	peer.create_client("localhost", 135)
	multiplayer.multiplayer_peer = peer
	print("Conectado al host")

func _on_button_host_stop_pressed():
	multiplayer.multiplayer_peer = null
	peer.close()
	print("conexion terminada")

func _on_button_view_clients_pressed():
	print(str(multiplayer.get_peers()))
	print("Server:", multiplayer.get_unique_id())
	print(players)
	print(players[1]["name"])
	

func _on_button_pressed():
	var local_scene = EditorInterface.get_edited_scene_root()
	var root_scene = local_scene.get_tree().root
	print("Escena actual:",local_scene)
	print("Arbol escena:",local_scene.get_tree())
	print("Root:",root_scene)
	#transverse_scene(root_scene)


func transverse_scene(node):
	if node is Node3D:
		print("El objeto:"+node.name+"Es 3D")
		print(node.transform)
		
	# Recorre los hijos
	for i in range(node.get_child_count()):
		transverse_scene(node.get_child(i))



func _on_button_test_2_pressed():
	transfer_some_input.rpc_id(1) # Send the input only to the server.
	"""
	if multiplayer.is_server():
		print("Enviando mensaje")
		enviar_msg()
	"""
		
		
# Call local is required if the server is also a player.
@rpc("any_peer", "call_local", "reliable")
func transfer_some_input():
	# The server knows who sent the input.
	var sender_id = multiplayer.get_remote_sender_id()
	print(sender_id)
	# Process the input and affect game logic.
